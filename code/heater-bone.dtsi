/*
 * Copyright (C) 2013 Ben Gamari <bgamari.foss@gmail.com>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 as published by the Free Software Foundation.
 */

&am33xx_pinmux {
    gpio_helper_pins: pinmux_gpio_helper_pins {
        pinctrl-single,pins = <
            // BTN4         = P8_07 = gpio2[2] INPUT   = gpio66
            0x90 0x27
            // BTN3         = P8_08 = gpio2[3] INPUT   = gpio67
            0x94 0x27
            // BTN2         = P8_09 = gpio2[5] INPUT   = gpio69
            0x9c 0x27
            // BTN1         = P8_10 = gpio2[4] INPUT   = gpio68
            0x98 0x27
            // HEATER_EN_SS = P8_11 = gpio1[13]        = gpio45
            0x34 0x07
            // HEATER_EN    = P8_12 = gpio1[12]        = gpio44
            0x30 0x07
            // ENC_SW       = P8_13 = gpio0[23] INPUT  = gpio23
            0x24 0x27
            // ENC_B        = P8_14 = gpio0[26] INPUT  = gpio26
            0x28 0x27
            // ENC_A        = P8_15 = gpio1[15] INPUT  = gpio47
            0x3c 0x27
            // LCD_D7       = P8_16 = gpio1[14]        = gpio46
            0x38 0x07
            // LCD_D5       = P8_17 = gpio0[27]        = gpio27
            0x2c 0x07
            // LCD_D6       = P8_18 = gpio2[1]         = gpio65
            0x8c 0x07
            // LCD_D4       = P8_19 = gpio0[22]        = gpio22
            0x20 0x07
            // LCD_D3       = P8_26 = gpio1[29]        = gpio61
            0x7c 0x07
            // LCD_D1       = P8_27 = gpio2[22]        = gpio86
            0xe0 0x07
            // LCD_D2       = P8_28 = gpio2[24]        = gpio88
            0xe8 0x07
            // LCD_E        = P8_29 = gpio2[23]        = gpio87
            0xe4 0x07
            // LCD_D0       = P8_30 = gpio2[25]        = gpio89
            0xec 0x07
            // XBEE_CTSn    = P8_31 = uart5_ctsn
            0xd8 0x06
            // XBEE_RTSn    = P8_32 = uart5_rtsn INPUT
            0xdc 0x26
            // LCD_RS       = P8_34 = gpio2[17]        = gpio81
            0xcc 0x07
            // XBEE_TXD     = P8_37 = uart5_txd
            0xc0 0x04
            // XBEE_RXD     = P8_38 = uart5_rxd INPUT
            0xc4 0x24
            // XBEE_RESETn  = P8_39 = gpio2[12]        = gpio76
            0xb8 0x07
            // XBEE_SLEEP_RQ = P8_40 = gpio2[13]       = gpio77
            0xbc 0x07
            // XBEE_PWR     = P8_42 = gpio2[10]        = gpio75
            0xb4 0x07

            // ADC_INT      = P9_23 = gpio1[17] INPUT  = gpio49
            0x44 0x27
            // NRF_CE       = P9_26 = gpio0[14]        = gpio14
            // [    6.899472] pinctrl-single 44e10800.pinmux: pin 44e10980.0 already requested by 48022000.serial; cannot claim for pwmleds.9

            //0x180 0x07
            // NRF_IRQ      = P9_27 = gpio3[19] INPUT  = gpio115
            0x1a4 0x27
            // SPI1_MOSI    = P9_29 = spi1_d0
            0x194 0x03
            // SPI1_MISO    = P9_30 = spi1_d1 INPUT
            0x198 0x23
            // SPI1_SCLK    = P9_31 = spi1_sclk INPUT
            0x190 0x23
            // NRF_CSn      = P9_42 = spi1_cs1
            // [    9.863443] pinctrl-single 44e10800.pinmux: pin 44e10964.0 already requested by 48300000.epwmss; cannot claim for pwmleds.9

            //0x164 0x02
        >;
    };
};

&i2c2 {
    #address-cells = <1>;
    #size-cells = <0>;
    status = "okay";

    pwm: pca@40 {
        compatible = "nxp,pca9685-pwm";
        #pwm-cells = <2>;
        reg = <0x40>;
        invert;
        // Don't use open-drain on v2 of board due to LCD backlight
        //open-drain;
    };

    adc: adt7411@4b {
        compatible = "adi,adt7411";
        reg = <0x4b>;
        #address-cells = <1>;
        #size-cells = <0>;
    };
};

/ {
    pwmleds {
        compatible = "pwm-leds";

    // placed here for lack of a better place
    pinctrl-names = "default";
    pinctrl-0 = <&gpio_helper_pins>;

        // The period_ns values accepted by the PCA9685
        // driver are a lie. The driver simply determines
        // the desired on-time by,
        //
        //     duty = 4096 * duty_ns / period_ns
        lcd_backlight {
            pwms = <&pwm 15 4096>;
            label = "heater:white:lcd";
            max-brightness = <4095>;
        };
        red {
            pwms = <&pwm 14 4096>;
            label = "heater:status:red";
            max-brightness = <4095>;
        };
        green {
            pwms = <&pwm 13 4096>;
            label = "heater:status:green";
            max-brightness = <4095>;
        };
        blue {
            pwms = <&pwm 12 4096>;
            label = "heater:status:blue";
            max-brightness = <4095>;
        };
        
        led1  {
            pwms = <&pwm 10 4096>;
            label = "heater:led1:green";
            max-brightness = <4095>;
        };
        led2  {
            pwms = <&pwm 11 4096>;
            label = "heater:led1:red";
            max-brightness = <4095>;
        };
        led3  {
            pwms = <&pwm 4  4096>;
            label = "heater:led2:green";
            max-brightness = <4095>;
        };
        led4  {
            pwms = <&pwm 5  4096>;
            label = "heater:led2:red";
            max-brightness = <4095>;
        };
        led5  {
            pwms = <&pwm 8  4096>;
            label = "heater:led3:green";
            max-brightness = <4095>;
        };
        led6  {
            pwms = <&pwm 9  4096>;
            label = "heater:led3:red";
            max-brightness = <4095>;
        };
        led7  {
            pwms = <&pwm 6  4096>;
            label = "heater:led4:green";
            max-brightness = <4095>;
        };
        led8  {
            pwms = <&pwm 7  4096>;
            label = "heater:led4:red";
            max-brightness = <4095>;
        };
        led9  {
            pwms = <&pwm 0  4096>;
            label = "heater:encoder:red";
            max-brightness = <4095>;
        };
        led10 {
            pwms = <&pwm 1  4096>;
            label = "heater:encoder:green";
            max-brightness = <4095>;
        };
        led11 {
            pwms = <&pwm 2  4096>;
            label = "heater:encoder:blue";
            max-brightness = <4095>;
        };
        led12 {
            pwms = <&pwm 3  4096>;
            label = "heater:led12:red";
            max-brightness = <4095>;
        };
    };
};

/ {
    gpio_keys {
        compatible = "gpio-keys";
        #address-cells = <1>;
        #size-cells = <0>;

        autorepeat;
        button@1 {
            label = "down";
            linux,code = <108>;
            autorepeat;
            gpios = <&gpio2 4 0x00>;
        };

        button@2 {
            label = "left";
            linux,code = <105>;
            autorepeat;
            gpios = <&gpio2 5 0x00>;
        };

        button@3 {
            label = "right";
            linux,code = <106>;
            autorepeat;
            gpios = <&gpio2 3 0x00>;
        };

        button@4 {
            label = "up";
            linux,code = <103>;
            autorepeat;
            gpios = <&gpio2 2 0x00>;
        };

        button@5 {
            label = "enter";
            linux,code = <28>;
            gpios = <&gpio0 23 0x00>;
        };
    };

    rotary@0 {
        compatible = "rotary-encoder";
        gpios = <&gpio1 15 0>, <&gpio0 26 0>; 
        linux,axis = <0>; /* REL_X */
        rotary-encoder,relative-axis;
    };
};

/ {
    gpio_helper {
        compatible = "gpio-of-helper";
        status = "okay";

        heater_enable {
            gpio-name = "heater_enable";
            gpio = <&gpio2 12 0x00>;
            output;
        };

        heater_enable_ss {
            gpio-name = "heater_enable_ss";
            gpio = <&gpio2 13 0x00>;
            output;
        };

        lcd_d6 {
            gpio-name = "lcd_d6";
            gpio = <&gpio2 30 0x00>;
            output;
        };

        lcd_d7 {
            gpio-name = "lcd_d7";
            gpio = <&gpio2 5  0x00>;
            output;
        };

        lcd_d4 {
            gpio-name = "lcd_d4";
            gpio = <&gpio2 4  0x00>;
            output;
        };

        lcd_d5 {
            gpio-name = "lcd_d5";
            gpio = <&gpio2 1  0x00>;
            output;
        };

        lcd_d2 {
            gpio-name = "lcd_d2";
            gpio = <&gpio2 0  0x00>;
            output;
        };

        lcd_d3 {
            gpio-name = "lcd_d3";
            gpio = <&gpio2 29 0x00>;
            output;
        };

        lcd_d0 {
            gpio-name = "lcd_d0";
            gpio = <&gpio3 22 0x00>;
            output;
        };

        lcd_d1 {
            gpio-name = "lcd_d1";
            gpio = <&gpio3 24 0x00>;
            output;
        };

        lcd_rs {
            gpio-name = "lcd_rs";
            gpio = <&gpio3 23 0x00>;
            output;
        };

        lcd_e  {
            gpio-name = "lcd_e";
            gpio = <&gpio3 25 0x00>;
            output;
        };

        xbee_pwr {
            gpio-name = "xbee_pwr";
            gpio = <&gpio3 11 0x00>;
            output;
        };

        xbee_reset {
            gpio-name = "xbee_reset";
            gpio = <&gpio3 12 0x00>;
            output;
        };
    };
};
